{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","_this2","this","react_default","a","createElement","className","concat","props","children","onClick","handleClick","Component","Input","ClearButton","_this","handleClear","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addToInput","setState","input","state","addZeroToInput","clearInput","add","output","String","split","reduce","sum","digit","parseInt","multiply","product","operator","console","log","class","src_components_Input","src_components_Button","src_components_ClearButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c322ba62.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './Button.css';\n\n// Operators in a different color than the digits \n// NaN = Not-a-number. If it isn't a number, make it colored. \n// i!sNan(val) if it's not a number \n\nclass Button extends Component {\n \n  isOperator = val => {\n    return !isNaN(val);\n  };\n  \n  \n// gets all digits from button, import eveything inside the {} to app.\n// creates a new function through the function isOperator above \n// \"\" is empty for not add any styling. If it's a operator add a class. \n\n  render() {\n    return(\n    <div \n      className={`Button ${this.isOperator\n        (this.props.children) ? \"\" : \"operator\"}`}\n        onClick={() => this.props.handleClick(this.props.children)}\n     >\n     {this.props.children} \n     </div>\n    )\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport './Input.css';\n\n// this.props.children in the input to show the digits \n\nclass Input extends Component {\n \n  render() {\n    return(\n        <div className=\"Input\">\n        {this.props.children}\n        </div>\n    )\n  }\n}\n\nexport default Input;","import React, { Component } from \"react\";\nimport './ClearButton.css';\n\n// onClick passed in a method, onClick use this props that is passed in function handleClear\n// this.props.children in input to show the digits \n\nclass ClearButton extends Component {\n \n  render() {\n    return(\n        <div className=\"ClearButton\" onClick={() => this.props.handleClear()}>\n        {this.props.children}\n        </div>\n    )\n  }\n}\n\nexport default ClearButton;","import React, { Component } from \"react\";\nimport './App.css';\nimport Button from './components/Button'; \nimport Input from './components/Input';\nimport ClearButton from './components/ClearButton';\n\n\nclass App extends Component {\n\n\n  // Constructor used for initial the state\n  // Super refers to the parents class constructor (necessary for the constructor to initilaize this.props)\n  // this.state is where the data comes from\n  // For the setState, container for holding the state together. \n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      operator: \"\"\n    };\n  }\n    // this.setState() method is used to update the state.\n    // Value passed in to this function from the button children area with handleclick\n    addToInput = val => {\n      this.setState({ input: this.state.input + val });\n    }\n\n    // If this.state.input is not empty then add zero\n    // If this.state.input is not blank (another number has already been added in)\n    addZeroToInput = val => {\n      if (this.state.input !== \"\") {\n        this.setState({ input: this.state.input + val });\n       }\n      };\n\n    // Input = blank \n    clearInput = () => {\n      this.setState({ input: \"\" });\n    };\n\n    // First I tried to solve the add and multiply functions this way. But here I having a issue parse the \n    // input digits to the chosen operator.  The result add the input together but dosen't give a single value or the value that I want. \n  \n    \n    // add = () => {\n    //   this.setState({ input: \"\"});\n    //   this.state.operator = \"plus\";\n  \n    //   if (this.state.operator == \"plus\") {\n    //     this.setState({\n    //       input:\n    //         parseInt(this.state.input) +\n    //         parseInt(this.state.input)\n    //     });\n    //    }\n    //  };\n\n\n    // Insted I solved it by: \n\n    // Using Const variable declaration since I'm not going to reassigning new values to the variables. \n    // 1. assigning the variable \n    // 2. parse the input into single digits => done by a string.split (the string is split between each character ('') = 1,1,1,).\n    // 3. apply the chosen operator +/* to the parsed digits  => done by a array.reduce (The reduce method reduces the array to a single value).\n    // 4. output the result replacing the input with const output that does the function above => done by setState\n  \n    add = () => {\n      const { input } = this.state\n      const digits = String(input).split('')\n      const output = digits.reduce((sum, digit) => sum + parseInt(digit, 10), 0)\n      this.setState({ input: output })\n    };\n\n\n    multiply = () => {\n      const { input } = this.state\n      const digits = String(input).split('')\n      const output = digits.reduce((product, digit) => product * parseInt(digit, 10), 1)\n      this.setState({ input: output })\n    }\n\n \n  // Using render for sharing code between compontents using props\n  // Check the files Button.js (handleClick), ClearButton.js (handleClear) and Input.js (input)\n\n  render() {\n\n  // console.log this.state to see the actions in the console \n\n  console.log(\"this.state is: \", this.state)\n\n      return (\n        <div className=\"App\">\n          <div className=\"calc-wrapper\">\n\n          <div class=\"description\">\n          <h1>Calculator</h1>\n          <p>Instructions:</p>\n          <p>Ex. Insert 2468 press + and the answer should be 20</p>\n          <p>Ex. Insert 2359 press * and the answer should be 270</p>\n          </div>\n\n          <div className=\"row\">\n          <Input>{this.state.input}</Input>\n          </div>\n\n  {/* Add a action to the button = handleClick */}\n          \n            <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n          </div>\n          <div className=\"row\">\n          <Button handleClick={this.add}>+</Button>\n            <Button handleClick={this.addZeroToInput}>0</Button>\n            <Button handleClick={this.multiply}>*</Button>\n          </div>\n          <div className=\"row\">\n          <ClearButton handleClear={this.clearInput}>Clear</ClearButton>\n          </div>\n        </div>\n      </div> \n\n        );\n      }\n    }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}